<root>
<let id = "f" > <vexp op = "id" type = "Nat" rec = "f"> n </vexp> <vexp op = "id" type = "Nat" > size </vexp>
    <vexp op = "id" type = "Nat" > M </vexp>
                <qvexp op = "id" type = "Phi(size, size)" > x </qvexp>
   <match id = "n" >
          <pair case = "0" >  <pexp gate = "SKIP" id = "x" > <vexp op = "num" > 0 </vexp> </pexp> </pair>
           <pair case = "m" >
                  <app id = "f" >  <vexp op = "id" > m </vexp> <vexp op = "id" > size </vexp> <vexp op = "id" > M </vexp> <qvexp op = "id" > x </qvexp> </app>
                  <if> <vexp op = "$" > <vexp op = "id" > M </vexp> <vexp op = "id" > m </vexp> </vexp>
                      <next> <pexp gate = "SR" id = "x" > <vexp op = "-" > <vexp op = "id" > size </vexp> <vexp op = "id" > m </vexp> </vexp> </pexp> </next>
                      <next> <pexp gate = "SKIP" id = "x" > <vexp op = "id" > m </vexp> </pexp> </next>
                 </if>
           </pair>
   </match>
</let>
<pexp gate = "QFT" id = "x" > <vexp op = "num" > 0 </vexp> </pexp>
<app id = "f" > <vexp op = "id"> na </vexp> <vexp op = "id" > size </vexp> <vexp op = "id" > m </vexp> <qvexp op = "id" type = "Phi(size, size)"  > x </qvexp> </app>
<pexp gate = "RQFT" id = "x" > </pexp>
</root>